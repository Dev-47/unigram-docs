{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unigram Platform for universities to manage course materials in an organized format and pass information from the verified source, and provide a QA scheme between students and other platform users Unigram is meant for nigeria univerisities, to make studying easier for students, inside or outside the classroom.","title":"Home"},{"location":"#unigram","text":"Platform for universities to manage course materials in an organized format and pass information from the verified source, and provide a QA scheme between students and other platform users Unigram is meant for nigeria univerisities, to make studying easier for students, inside or outside the classroom.","title":"Unigram"},{"location":"service-architecture/","text":"Service Architecture The project will be built using the microservice architechure , and communicate using asychronous and synchronous protocols. - For asynchronous protocols , we will be using RabbitMQ as a message broker. - For synchronous protocols , this is language dependent, check the official documentation of your language to get the HTTP request library Short Note on Micoservice Architecture Microservice is an independent service that can work alone as an application, losely coupled with other applications to perform similar functions. This makes development faster and easier to maintain, it also encourages usabilty, gives more options on language choices, helps manage resources and work load among developers. In this architecture, you can have 2 or more services cummunicating with each other to perform similar operations. more on microservices - From AWS - From Microsoft","title":"Service Architecture"},{"location":"service-architecture/#service-architecture","text":"The project will be built using the microservice architechure , and communicate using asychronous and synchronous protocols. - For asynchronous protocols , we will be using RabbitMQ as a message broker. - For synchronous protocols , this is language dependent, check the official documentation of your language to get the HTTP request library","title":"Service Architecture"},{"location":"service-architecture/#short-note-on-micoservice-architecture","text":"Microservice is an independent service that can work alone as an application, losely coupled with other applications to perform similar functions. This makes development faster and easier to maintain, it also encourages usabilty, gives more options on language choices, helps manage resources and work load among developers. In this architecture, you can have 2 or more services cummunicating with each other to perform similar operations. more on microservices - From AWS - From Microsoft","title":"Short Note on Micoservice Architecture"},{"location":"services/","text":"This contains documentations for unigram microservices. Conventions Always return response data in JSON format Always use the right status code Never return sensitive data as part of the JSON response data","title":"Index"},{"location":"services/#conventions","text":"Always return response data in JSON format Always use the right status code Never return sensitive data as part of the JSON response data","title":"Conventions"},{"location":"services/account-service/","text":"unigram-accounts-service This service will handle user / account based operations like; - authentications - profile updates - preferences - passwords / resets - account types expected endpoints /login/ using POST method, pass username and password to request body to authenticate users and return a token along with any other information /register/ using POST method, pass email , username and password to request body and return a token along with any other information /logout/ using GET method, invalidate/destroy existing token for a user /profile/ using GET method, return the authenticated user using PUT / PATCH method, update user profile, update should not include password updates password/reset/ using POST method, pass email to request body send OTP for password update allow password to be updated if OTP is valid","title":"Account Service"},{"location":"services/account-service/#unigram-accounts-service","text":"This service will handle user / account based operations like; - authentications - profile updates - preferences - passwords / resets - account types","title":"unigram-accounts-service"},{"location":"services/account-service/#expected-endpoints","text":"/login/ using POST method, pass username and password to request body to authenticate users and return a token along with any other information /register/ using POST method, pass email , username and password to request body and return a token along with any other information /logout/ using GET method, invalidate/destroy existing token for a user /profile/ using GET method, return the authenticated user using PUT / PATCH method, update user profile, update should not include password updates password/reset/ using POST method, pass email to request body send OTP for password update allow password to be updated if OTP is valid","title":"expected endpoints"},{"location":"services/broadcast-service/","text":"unigram-broadcast-service This service will be responsible for sending broadcast to a specific channel (group) and the memebers in that channel can add comments to each broadcast sent. Permissions are restricted to authorized users only with permission of can_send_broadcast from the unigram-account-service . All users must be authenticated to perform any action on this service. Broadcasts can only be edited by the author . expected endpoints /broadcast/ using the GET method, list all broadcast available, and also allow options to use filters filter options: date_of_creation , category using the POST method, broadcasts can get created by authorized users with the permission of can_create_broadcast each broadcast should belong to a university each broadcast should belong to a new / exisiting category broadcast category can be nested broadcast/:broadcast_id/ using the GET method, a broadcast can be fetched using the broadcast_id , this should return a single broadcast object broadcast/:broadcast_id/join/ using the GET method, an authenticated user that belongs to a university can request to join a broadcast broadcast/:broadcast_id/leave/ using the GET method, an authenticated user that belongs to a university can leave a broadcast broadcast/:broadcast_id/send-broadcast/ using the POST method, an authenticated user with the permission of can_send_broadcast can send broadcast to channel pass all data to the body of the request","title":"Broadcast Service"},{"location":"services/broadcast-service/#unigram-broadcast-service","text":"This service will be responsible for sending broadcast to a specific channel (group) and the memebers in that channel can add comments to each broadcast sent. Permissions are restricted to authorized users only with permission of can_send_broadcast from the unigram-account-service . All users must be authenticated to perform any action on this service. Broadcasts can only be edited by the author .","title":"unigram-broadcast-service"},{"location":"services/broadcast-service/#expected-endpoints","text":"/broadcast/ using the GET method, list all broadcast available, and also allow options to use filters filter options: date_of_creation , category using the POST method, broadcasts can get created by authorized users with the permission of can_create_broadcast each broadcast should belong to a university each broadcast should belong to a new / exisiting category broadcast category can be nested broadcast/:broadcast_id/ using the GET method, a broadcast can be fetched using the broadcast_id , this should return a single broadcast object broadcast/:broadcast_id/join/ using the GET method, an authenticated user that belongs to a university can request to join a broadcast broadcast/:broadcast_id/leave/ using the GET method, an authenticated user that belongs to a university can leave a broadcast broadcast/:broadcast_id/send-broadcast/ using the POST method, an authenticated user with the permission of can_send_broadcast can send broadcast to channel pass all data to the body of the request","title":"expected endpoints"},{"location":"services/forum-service/","text":"unigram-forum-service There should be a means to seek solutions from other users on the platform (Alumni, Lecturers, others). Students can post questions and get answers from other users on the platform. Questions that are posted should be sent to the lecturers in the question category to review and give answers. Students can select question categories to optimize filters for users that would view the questions. There should be a space to attach images to texts for questions and answers.","title":"Forum Service"},{"location":"services/forum-service/#unigram-forum-service","text":"There should be a means to seek solutions from other users on the platform (Alumni, Lecturers, others). Students can post questions and get answers from other users on the platform. Questions that are posted should be sent to the lecturers in the question category to review and give answers. Students can select question categories to optimize filters for users that would view the questions. There should be a space to attach images to texts for questions and answers.","title":"unigram-forum-service"}]}